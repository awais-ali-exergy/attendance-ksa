{"version":3,"sources":["views/pages/ManualAttendance/AdminManualAttendance.js"],"names":["AddEmployee","navigate","useNavigate","parms","useParams","id","parseInt","isNaN","t","useTranslation","userByFrim","setUserByFrim","useState","attTypes","setAttTypes","picker","setPicker","Date","userTime","setUserTime","userDate","setUserDate","console","log","userId","setUserId","state","setState","userdate","usertime","attendanceTypeId","useEffect","async","myHeaders","Headers","append","window","localStorage","getItem","formdata","FormData","requestOptions","method","headers","body","redirect","fetch","concat","process","then","response","json","result","SUCCESS","data","DATA","createdOnDateByUser","createdOnTimeByUser","moment","createdOnByUserTimeDisplay","format","catch","error","getattendanceById","getUsers","getAttTypes","handleTimeFormat","event","selectedDate","target","value","formattedTime","_jsx","Fragment","children","_jsxs","Form","onSubmit","document","getElementById","saveAtt","Row","Col","md","className","Label","Input","type","name","onChange","e","placeholder","length","map","obj","index","label","for","Flatpickr","dateFormat","selectedDates","formattedDate","handleDateFormat","Button","color","outline","onClick"],"mappings":"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","file":"static/js/19.e55c6b38.chunk.js","sourcesContent":["// ** React Imports\r\nimport { useState, useEffect, useRef, Fragment } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { Alert } from \"reactstrap\";\r\nimport \"@styles/react/apps/app-users.scss\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport moment from \"moment\";\r\n\r\nimport Flatpickr from \"react-flatpickr\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { Label, Row, Col, Form, Input, Button } from \"reactstrap\";\r\n\r\nconst AddEmployee = () => {\r\n  const navigate = useNavigate();\r\n  let parms = useParams();\r\n  let id = parseInt(parms.id);\r\n  if (isNaN(id)) id = 0;\r\n  const { t } = useTranslation();\r\n  const [userByFrim, setUserByFrim] = useState([]);\r\n  const [attTypes, setAttTypes] = useState([]);\r\n\r\n  const [picker, setPicker] = useState(new Date());\r\n  const [userTime, setUserTime] = useState(new Date());\r\n  const [userDate, setUserDate] = useState(new Date());\r\n  console.log(\"data is\");\r\n  const datecheck = (date) => {\r\n    (date) => setPicker(date);\r\n    console.log(picker);\r\n  };\r\n  const [userId, setUserId] = useState(\"\");\r\n  //   const [userTime, setUserTime] = React.useState(dayjs(new Date()));\r\n  //   const [userDate, setUserDate] = React.useState(dayjs(new Date()));\r\n\r\n  const [state, setState] = useState({\r\n    userdate: \"\",\r\n    usertime: \"\",\r\n    attendanceTypeId: \"\",\r\n    userId: \"\",\r\n  });\r\n  const handleChange = (e) => {\r\n    setState({ ...state, [e.target.name]: e.target.value });\r\n  };\r\n  const getAttTypes = async () => {\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\r\n      \"Authorization\",\r\n      \"Bearer \" + window.localStorage.getItem(\"AtouBeatXToken\")\r\n    );\r\n\r\n    var formdata = new FormData();\r\n\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: formdata,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    await fetch(\r\n      `${process.env.REACT_APP_API_DOMAIN}${process.env.REACT_APP_SUB_API_NAME}/Attendances/GetAttendanceTypesDropdown`,\r\n      requestOptions\r\n    )\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        if (result.SUCCESS === 1) {\r\n          let data = result.DATA;\r\n          if (data) {\r\n            setAttTypes(data);\r\n          }\r\n        } else {\r\n          //   handleOpenSnackbar(<span>{result.USER_MESSAGE}</span>, \"error\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error\", error);\r\n        // handleOpenSnackbar(\r\n        //   \"Failed to fetch ! Please try Again later.\",\r\n        //   \"error\"\r\n        // );\r\n      });\r\n  };\r\n  const getUsers = async () => {\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\r\n      \"Authorization\",\r\n      \"Bearer \" + window.localStorage.getItem(\"AtouBeatXToken\")\r\n    );\r\n\r\n    var formdata = new FormData();\r\n\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: formdata,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    await fetch(\r\n      `${process.env.REACT_APP_API_DOMAIN}${process.env.REACT_APP_SUB_API_NAME}/Attendances/GetUsersDropdownByFirm`,\r\n      requestOptions\r\n    )\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        if (result.SUCCESS === 1) {\r\n          let data = result.DATA;\r\n          if (data) {\r\n            setUserByFrim(data);\r\n          }\r\n        } else {\r\n          //   handleOpenSnackbar(<span>{result.USER_MESSAGE}</span>, \"error\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error\", error);\r\n        // handleOpenSnackbar(\r\n        //   \"Failed to fetch ! Please try Again later.\",\r\n        //   \"error\"\r\n        // );\r\n      });\r\n  };\r\n  const saveAtt = async () => {\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\r\n      \"Authorization\",\r\n      \"Bearer \" + window.localStorage.getItem(\"AtouBeatXToken\")\r\n    );\r\n\r\n    var formdata = new FormData(document.getElementById(\"attForm\"));\r\n    formdata.append(\"id\", id);\r\n    formdata.append(\"createdOnDateByUser\", state.userdate);\r\n    formdata.append(\"createdOnTimeByUser\", state.usertime);\r\n\r\n    console.log(formdata);\r\n\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: formdata,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    await fetch(\r\n      `${process.env.REACT_APP_API_DOMAIN}${process.env.REACT_APP_SUB_API_NAME}/Attendances/SaveManual`,\r\n      requestOptions\r\n    )\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        if (result.SUCCESS === 1) {\r\n          //   handleOpenSnackbar(<span>{result.USER_MESSAGE}</span>, \"success\");\r\n        } else {\r\n          //   handleOpenSnackbar(<span>{result.USER_MESSAGE}</span>, \"error\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error\", error);\r\n        // handleOpenSnackbar(\r\n        //   \"Failed to fetch ! Please try Again later.\",\r\n        //   \"error\"\r\n        // );\r\n      });\r\n  };\r\n  const getattendanceById = async (id) => {\r\n    // setIsLoading(true);\r\n    if (id === 0) {\r\n      //   setIsLoading(false);\r\n      return;\r\n    }\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\r\n      \"Authorization\",\r\n      \"Bearer \" + window.localStorage.getItem(\"AtouBeatXToken\")\r\n    );\r\n\r\n    var formdata = new FormData();\r\n    formdata.append(\"id\", id);\r\n\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: formdata,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    await fetch(\r\n      `${process.env.REACT_APP_API_DOMAIN}${process.env.REACT_APP_SUB_API_NAME}/Attendances/GetManualByIdAndFirm`,\r\n      requestOptions\r\n    )\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        console.log(\"getStoreById:\", result);\r\n        if (result.SUCCESS === 1) {\r\n          let data = result.DATA;\r\n          if (data) {\r\n            console.log(data);\r\n            setState({\r\n              userdate: data.createdOnDateByUser,\r\n              usertime: data.createdOnTimeByUser,\r\n              attendanceTypeId: data.attendanceTypeId,\r\n              userId: data.userId,\r\n            });\r\n\r\n            setUserTime(\r\n              moment(data.createdOnByUserTimeDisplay, \"hh:mm a\").format(\"HH:mm\")\r\n            );\r\n            setUserDate(new Date(data.createdOnDateByUser));\r\n          }\r\n        } else {\r\n          //   handleOpenSnackbar(<span>{result.USER_MESSAGE}</span>, \"error\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error\", error);\r\n        // handleOpenSnackbar(\r\n        //   \"Failed to fetch ! Please try Again later.\",\r\n        //   \"error\"\r\n        // );\r\n      });\r\n    // setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getattendanceById(id);\r\n    getUsers();\r\n    getAttTypes();\r\n  }, []);\r\n\r\n  const handleNavigation = () => {\r\n    navigate(\"/ViewAllAttendanceData\");\r\n  };\r\n\r\n  const handleDateFormat = (selectedDates) => {\r\n    const selectedDate = selectedDates[0];\r\n    setUserDate(selectedDate);\r\n    const formattedDate = moment(selectedDate).format(\"DD/MM/YYYY\");\r\n    setState({\r\n      ...state,\r\n      userdate: formattedDate,\r\n    });\r\n    console.log(formattedDate);\r\n  };\r\n\r\n  const handleTimeFormat = (event) => {\r\n    const selectedDate = event.target.value;\r\n    setUserTime(selectedDate);\r\n    setPicker(selectedDate);\r\n    const formattedTime = moment(selectedDate, \"HH:mm:ss\").format(\"hh:mm a\");\r\n    setState({\r\n      ...state,\r\n      usertime: formattedTime,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Form id=\"attForm\" onSubmit={() => saveAtt()}>\r\n        <Row>\r\n          <Col md=\"6\" className=\"mb-1\">\r\n            <Label className=\"form-label\">{t(\"Select Employee\")}</Label>\r\n            <Input\r\n              type=\"select\"\r\n              id=\"userId\"\r\n              name=\"userId\"\r\n              value={state.userId}\r\n              onChange={handleChange}\r\n              placeholder=\"Select Employee\"\r\n            >\r\n              <option></option>\r\n              {userByFrim && userByFrim.length > 0\r\n                ? userByFrim.map((obj, index) => (\r\n                    <option value={obj.id} key={obj.id}>\r\n                      {obj.label}\r\n                    </option>\r\n                  ))\r\n                : null}\r\n            </Input>\r\n          </Col>\r\n          <Col md=\"6\" className=\"mb-1\">\r\n            <Label className=\"form-label\" for=\"date-time-picker\">\r\n              Attendance Date\r\n            </Label>\r\n            <Flatpickr\r\n              value={userDate}\r\n              // altInput= {true}\r\n              //   dateFormat= \"YYYY-MM-DD\"\r\n              //   altFormat= \"DD-MM-YYYY\"\r\n              //   allowInput= {true}\r\n              dateFormat=\"Y-m-d\"\r\n              id=\"date-time-picker\"\r\n              className=\"form-control\"\r\n              onChange={(event) => handleDateFormat(event)}\r\n            />\r\n            {/* <Label className=\"form-label\">{t(\"Attendance Type\")}</Label> */}\r\n            {/* <Input\r\n              type=\"select\"\r\n              name=\"attendanceTypeId\"\r\n              id=\"attendanceTypeId\"\r\n              placeholder=\"Attendance Type\"\r\n              value={state.attendanceTypeId}\r\n              onChange={handleChange}\r\n            >\r\n              <option></option>\r\n              {attTypes && attTypes.length > 0\r\n                ? attTypes.map((obj, index) => (\r\n                    <option value={obj.id} key={obj.id}>\r\n                      {obj.label}\r\n                    </option>\r\n                  ))\r\n                : null}\r\n            </Input> */}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md=\"6\" className=\"mb-1\">\r\n            <Label className=\"form-label\" for=\"date-time-picker\">\r\n              Clock In Time\r\n            </Label>\r\n\r\n            <Input\r\n              value={userTime}\r\n              type=\"time\" // Set type to \"time\"\r\n              id=\"time-picker-clockIn\" // Unique identifier\r\n              className=\"form-control\"\r\n              onChange={(event) => handleTimeFormat(event)}\r\n            />\r\n          </Col>\r\n          <Col md=\"6\" className=\"mb-1\">\r\n            <Label className=\"form-label\" for=\"date-time-picker\">\r\n              Clock Out Time\r\n            </Label>\r\n\r\n            <Input\r\n              value={userTime}\r\n              type=\"time\" // Set type to \"time\"\r\n              id=\"time-picker\" // Unique identifier\r\n              className=\"form-control\"\r\n              onChange={(event) => handleTimeFormat(event)}\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <Button\r\n            color=\"secondary\"\r\n            className=\"btn-prev\"\r\n            outline\r\n            onClick={() => handleNavigation()}\r\n          >\r\n            <span className=\"align-middle d-sm-inline-block d-none\">View</span>\r\n          </Button>\r\n\r\n          <Button\r\n            type=\"submit\"\r\n            color=\"primary\"\r\n            className=\"btn-next\"\r\n            //   onClick={}\r\n          >\r\n            <span className=\"align-middle d-sm-inline-block d-none\">\r\n              {id !== 0 ? \"Update\" : \"Save\"}\r\n            </span>\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default AddEmployee;\r\n"],"sourceRoot":""}
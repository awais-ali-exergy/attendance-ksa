{"version":3,"sources":["views/pages/Holiday/TakeHolidayForm.js"],"names":["AddEmployee","navigate","useNavigate","parms","useParams","id","parseInt","isNaN","t","useTranslation","userDate","setUserDate","useState","state","setState","label","description","startOnDate","endOnDate","handleChange","e","target","name","value","console","log","_jsxs","Fragment","children","_jsx","ToastContainer","Form","onSubmit","saveAtt","Row","Col","md","className","Label","Input","onChange","placeholder","for","Flatpickr","dateFormat","event","selectedDates","selectedDate","formattedDate","moment","format","handleStartDateFormat","handleEndDateFormat","Button","color","outline","onClick","async","myHeaders","Headers","append","window","localStorage","getItem","formdata","FormData","requestOptions","method","headers","body","redirect","fetch","concat","process","then","response","json","result","USER_MESSAGE","Date","toast","catch","error","saveHoliday"],"mappings":"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","file":"static/js/18.2b795cfa.chunk.js","sourcesContent":["// ** React Imports\r\nimport { useState, useEffect, useRef, Fragment } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { Alert, InputGroup } from \"reactstrap\";\r\nimport \"@styles/react/apps/app-users.scss\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport moment from \"moment\";\r\nimport CustomAlert from \"../../components/alerts/CustomAlert\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport Flatpickr from \"react-flatpickr\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { Label, Row, Col, Form, Input, Button } from \"reactstrap\";\r\n\r\nconst AddEmployee = () => {\r\n  const navigate = useNavigate();\r\n  let parms = useParams();\r\n  let id = parseInt(parms.id);\r\n  if (isNaN(id)) id = 0;\r\n  const { t } = useTranslation();\r\n\r\n  const [userDate, setUserDate] = useState();\r\n\r\n  const [state, setState] = useState({\r\n    label: \"\",\r\n    description: \"\",\r\n    startOnDate: \"\",\r\n    endOnDate: \"\",\r\n  });\r\n  const handleChange = (e) => {\r\n    setState({ ...state, [e.target.name]: e.target.value });\r\n    console.log(state);\r\n  };\r\n\r\n  const saveHoliday = async () => {\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\r\n      \"Authorization\",\r\n      \"Bearer \" + window.localStorage.getItem(\"AtouBeatXToken\")\r\n    );\r\n\r\n    var formdata = new FormData();\r\n    formdata.append(\"label\", state.label);\r\n    formdata.append(\"description\", state.description);\r\n    formdata.append(\"startOnDate\", state.startOnDate);\r\n    formdata.append(\"endOnDate\", state.endOnDate);\r\n\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: formdata,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    await fetch(\r\n      `${process.env.REACT_APP_API_DOMAIN}${process.env.REACT_APP_SUB_API_NAME}/Holidays/Save`,\r\n\r\n      requestOptions\r\n    )\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        if (result.USER_MESSAGE === \"Holiday Saved\") {\r\n          //   handleOpenSnackbar(<span>{result.USER_MESSAGE}</span>, \"success\");\r\n          console.log(state);\r\n          setState({\r\n            label: \"\",\r\n            description: \"\",\r\n            startOnDate: new Date(),\r\n            endOnDate: new Date(),\r\n          });\r\n          toast(result.USER_MESSAGE);\r\n          setUserDate(\"\");\r\n        } else {\r\n          toast(result.USER_MESSAGE);\r\n          // handleOpenAlert(<span>{result.USER_MESSAGE}.</span>, \"danger\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error\", error);\r\n        toast(\"Failed to fetch ! Please try Again later\");\r\n        // handleOpenAlert(\r\n        //   <span>Failed to fetch ! Please try Again later.</span>,\r\n        //   \"danger\"\r\n        // );\r\n      });\r\n  };\r\n\r\n  const handleNavigation = () => {\r\n    navigate(\"/ViewAllHolidayData\");\r\n  };\r\n\r\n  const handleStartDateFormat = (selectedDates) => {\r\n    const selectedDate = selectedDates[0];\r\n    const formattedDate = moment(selectedDate).format(\"DD/MM/YYYY\");\r\n    setState({\r\n      ...state,\r\n      startOnDate: formattedDate,\r\n    });\r\n  };\r\n\r\n  const handleEndDateFormat = (selectedDates) => {\r\n    const selectedDate = selectedDates[0];\r\n    const formattedDate = moment(selectedDate).format(\"DD/MM/YYYY\");\r\n    setState({\r\n      ...state,\r\n      endOnDate: formattedDate,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <ToastContainer\r\n      // toastStyle={{ backgroundColor: \"#10a945\", color: \"white\" }}\r\n      />\r\n      <Form id=\"attForm\" onSubmit={() => saveAtt()}>\r\n        <Row>\r\n          <Col md=\"6\" className=\"mb-1\">\r\n            <Label className=\"form-label\">{t(\"Holiday Label\")}</Label>\r\n            <Input\r\n              id=\"label\"\r\n              name=\"label\"\r\n              onChange={handleChange}\r\n              placeholder=\"Label\"\r\n              value={state.label}\r\n            />\r\n          </Col>\r\n          <Col md=\"6\" className=\"mb-1\">\r\n            <Label className=\"form-label\" for=\"date-time-picker\">\r\n              Start Date\r\n            </Label>\r\n            <Flatpickr\r\n              value={userDate}\r\n              // altInput= {true}\r\n              //   dateFormat= \"YYYY-MM-DD\"\r\n              //   altFormat= \"DD-MM-YYYY\"\r\n              //   allowInput= {true}\r\n              dateFormat=\"Y-m-d\"\r\n              id=\"startOnDate\"\r\n              name=\"startOnDate\"\r\n              className=\"form-control\"\r\n              onChange={(event) => handleStartDateFormat(event)}\r\n            />\r\n\r\n            {/* <Label className=\"form-label\">{t(\"Attendance Type\")}</Label> */}\r\n            {/* <Input\r\n              type=\"select\"\r\n              name=\"attendanceTypeId\"\r\n              id=\"attendanceTypeId\"\r\n              placeholder=\"Attendance Type\"\r\n              value={state.attendanceTypeId}\r\n              onChange={handleChange}\r\n            >\r\n              <option></option>\r\n              {attTypes && attTypes.length > 0\r\n                ? attTypes.map((obj, index) => (\r\n                    <option value={obj.id} key={obj.id}>\r\n                      {obj.label}\r\n                    </option>\r\n                  ))\r\n                : null}\r\n            </Input> */}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md=\"6\" className=\"mb-1\">\r\n            <Label className=\"form-label\" for=\"date-time-picker\">\r\n              End Date\r\n            </Label>\r\n\r\n            <Flatpickr\r\n              value={userDate}\r\n              // altInput= {true}\r\n              //   dateFormat= \"YYYY-MM-DD\"\r\n              //   altFormat= \"DD-MM-YYYY\"\r\n              //   allowInput= {true}\r\n\r\n              dateFormat=\"Y-m-d\"\r\n              id=\"endOnDate\"\r\n              name=\"endOnDate\"\r\n              className=\"form-control\"\r\n              onChange={(event) => handleEndDateFormat(event)}\r\n            />\r\n          </Col>\r\n          <Col md=\"6\" className=\"mb-1\">\r\n            <Label className=\"form-label\" for=\"date-time-picker\">\r\n              Description\r\n            </Label>\r\n\r\n            <Input\r\n              id=\"description\"\r\n              name=\"description\"\r\n              value={state.description}\r\n              onChange={handleChange}\r\n              placeholder=\"Description\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <Button\r\n            color=\"secondary\"\r\n            className=\"btn-prev\"\r\n            outline\r\n            onClick={() => handleNavigation()}\r\n          >\r\n            <span className=\"align-middle d-sm-inline-block d-none\">View</span>\r\n          </Button>\r\n          <Button\r\n            // type=\"submit\"\r\n            color=\"primary\"\r\n            className=\"btn-next\"\r\n            onClick={() => saveHoliday()}\r\n          >\r\n            <span className=\"align-middle d-sm-inline-block d-none\">\r\n              {id !== 0 ? \"Update\" : \"Save\"}\r\n            </span>\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default AddEmployee;\r\n"],"sourceRoot":""}
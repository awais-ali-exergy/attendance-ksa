{"version":3,"sources":["views/pages/Holiday/HolidayListview/HolidayListView.js"],"names":["ViewAllEmployeesData","isOpenAlert","setIsOpenAlert","useState","alertMessage","setAlertMessage","alertSeverity","setAlertSeverity","attendance","setAttendance","getAllAtt","useNavigate","async","fetch","concat","process","method","headers","Authorization","window","localStorage","getItem","redirect","then","response","status","json","result","console","log","SUCCESS","DATA","toast","USER_MESSAGE","catch","error","handleOpenAlert","msg","severity","_jsx","children","useEffect","columnDefs","useMemo","headerName","field","sortable","filter","floatingFilter","_jsxs","_Fragment","ToastContainer","className","style","height","width","display","justifyContent","flexDirection","AgGridReact","rowData","pagination","paginationPageSize","paginationAutoPageSize","suppressPaginationPanel","animateRows","defaultColDef","resizable","CustomAlert","isOpen","message","handleCloseAlert","reason"],"mappings":"gGAAA,mFA+OeA,UA3McA,KAC3B,MAAOC,EAAaC,GAAkBC,oBAAS,IACxCC,EAAcC,GAAmBF,mBAAS,KAC1CG,EAAeC,GAAoBJ,mBAAS,KAY5CK,EAAYC,GAAiBN,mBAAS,IAKvCO,GAJWC,cAICC,gBACVC,MAAM,GAADC,OACNC,2BAAgCD,OAAGC,OAAkC,0BACxE,CACEC,OAAQ,OACRC,QAAS,CACPC,cACE,UAAYC,OAAOC,aAAaC,QAAQ,mBAE5CC,SAAU,WAGXC,MAAMC,IACDA,EAASC,OAGND,EAASE,UAEjBH,MAAMI,IACLC,QAAQC,IAAIF,GACW,IAAnBA,EAAOG,SACTrB,EAAckB,EAAOI,MACrBC,YAAML,EAAOM,eAEbD,YAAML,EAAOM,aAEf,IAEDC,OAAOC,IA5CYC,IAACC,EAAKC,EA6CxBN,YAAM,+CA7CaK,EA+CjBE,cAAA,QAAAC,SAAM,8CA/CgBF,EAgDtB,SA/CNpC,GAAe,GACfG,EAAgBgC,GAChB9B,EAAiB+B,EA8CZ,GACD,GAgDNG,qBAAU,KACR/B,GAAW,GACV,IAEH,MAAMgC,EAAaC,mBACjB,IAAM,CACJ,CACEC,WAAY,gBACZC,MAAO,QACPC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,GAElB,CACEJ,WAAY,cACZC,MAAO,cACPC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,GAElB,CACEJ,WAAY,aACZC,MAAO,qBACPC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,GAElB,CACEJ,WAAY,WACZC,MAAO,mBACPC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,KAwBpB,IAGF,OACEC,eAAAC,WAAA,CAAAV,SAAA,CACED,cAACY,IACD,IAEAZ,cAAA,OAAKa,UAAU,mBAAkBZ,SAC/BD,cAAA,OACEa,UAAU,kBACVC,MAAO,CACLC,OAAQ,QACRC,MAAO,OACPC,QAAS,OACTC,eAAgB,eAChBC,cAAe,UACflB,SAEFD,cAACoB,cAAW,CACVjB,WAAYA,EACZkB,QAASpD,EACTqD,YAAY,EACZC,mBAAoB,GACpBC,wBAAwB,EACxBC,yBAAyB,EACzBC,aAAa,EACbC,cAAe,CACbpB,UAAU,EACVqB,WAAW,EACXpB,QAAQ,SAKhBR,cAAC6B,IAAW,CACVC,OAAQpE,EACRqE,QAASlE,EACTkC,SAAUhC,EACViE,iBAAkBA,KA5LCA,IAAQC,EAChB,cAAXA,GAGJtE,GAAe,EAwLgC,MAE5C,C","file":"static/js/7.da2ce879.chunk.js","sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\r\nimport CustomAlert from \"../../../components/alerts/CustomAlert\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst styles = {\r\n  bgHeading: {\r\n    background: \"#10a945\",\r\n    color: \"white\",\r\n    padding: \"30px\",\r\n    textAlign: \"center\",\r\n  },\r\n  btnStyle: {\r\n    border: \"none\",\r\n    padding: \"0px 12px\",\r\n    background: \"#10a945\",\r\n    color: \"white\",\r\n    borderRadius: \"10px\",\r\n  },\r\n  btnSpacing: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-evenly\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"item\",\r\n  },\r\n  pad_Col: {\r\n    padding: \"15px\",\r\n    textAlign: \"center\",\r\n  },\r\n};\r\nconst ViewAllEmployeesData = () => {\r\n  const [isOpenAlert, setIsOpenAlert] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState(\"\");\r\n  const [alertSeverity, setAlertSeverity] = useState(\"\");\r\n  const handleOpenAlert = (msg, severity) => {\r\n    setIsOpenAlert(true);\r\n    setAlertMessage(msg);\r\n    setAlertSeverity(severity);\r\n  };\r\n  const handleCloseAlert = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setIsOpenAlert(false);\r\n  };\r\n  const [attendance, setAttendance] = useState([]);\r\n  const navigate = useNavigate();\r\n  const handleNavigation = (id) => {\r\n    navigate(\"/AdminManualAttendance/\" + id);\r\n  };\r\n  const getAllAtt = async () => {\r\n    await fetch(\r\n      `${process.env.REACT_APP_API_DOMAIN}${process.env.REACT_APP_SUB_API_NAME}/Holidays/GetAllByFirm`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization:\r\n            \"Bearer \" + window.localStorage.getItem(\"AtouBeatXToken\"),\r\n        },\r\n        redirect: \"follow\",\r\n      }\r\n    )\r\n      .then((response) => {\r\n        if (response.status === 401) {\r\n          // <Logout />;\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((result) => {\r\n        console.log(result);\r\n        if (result.SUCCESS === 1) {\r\n          setAttendance(result.DATA);\r\n          toast(result.USER_MESSAGE);\r\n        } else {\r\n          toast(result.USER_MESSAGE);\r\n          // handleOpenAlert(<span>{result.USER_MESSAGE}.</span>, \"danger\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        toast(\"Failed to fetch ! Please try Again later.</\");\r\n        handleOpenAlert(\r\n          <span>Failed to fetch ! Please try Again later.</span>,\r\n          \"danger\"\r\n        );\r\n      });\r\n  };\r\n\r\n  const editBranch = (id) => {\r\n    window.location.replace(\"#/MainDashboard/AdminManualAttendance/\" + id);\r\n  };\r\n  const delAttendance = async (id) => {\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\r\n      \"Authorization\",\r\n      \"Bearer \" + window.localStorage.getItem(\"AtouBeatXToken\")\r\n    );\r\n\r\n    var formdata = new FormData();\r\n    formdata.append(\"id\", id);\r\n\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: formdata,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    await fetch(\r\n      `${process.env.REACT_APP_API_DOMAIN}${process.env.REACT_APP_SUB_API_NAME}/Attendances/DeleteByIdAndFirm`,\r\n      requestOptions\r\n    )\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        if (result.SUCCESS === 1) {\r\n          toast(result.USER_MESSAGE);\r\n          // handleOpenAlert(<span>{result.USER_MESSAGE}.</span>, \"primary\");\r\n          // window.location.reload();\r\n        } else {\r\n          toast(result.USER_MESSAGE);\r\n          // handleOpenAlert(<span>{result.USER_MESSAGE}.</span>, \"danger\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        toast(\"Failed to fetch ! Please try Again later.</\");\r\n\r\n        // handleOpenAlert(\r\n        //   <span>Failed to fetch ! Please try Again later.</span>,\r\n        //   \"danger\"\r\n        // );\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllAtt();\r\n  }, []);\r\n\r\n  const columnDefs = useMemo(\r\n    () => [\r\n      {\r\n        headerName: \"Holiday Label\",\r\n        field: \"label\",\r\n        sortable: true,\r\n        filter: true,\r\n        floatingFilter: true,\r\n      },\r\n      {\r\n        headerName: \"Description\",\r\n        field: \"description\",\r\n        sortable: true,\r\n        filter: true,\r\n        floatingFilter: true,\r\n      },\r\n      {\r\n        headerName: \"Start Date\",\r\n        field: \"startOnDateDisplay\",\r\n        sortable: true,\r\n        filter: true,\r\n        floatingFilter: true,\r\n      },\r\n      {\r\n        headerName: \"End Date\",\r\n        field: \"endOnDateDisplay\",\r\n        sortable: true,\r\n        filter: true,\r\n        floatingFilter: true,\r\n      },\r\n\r\n      // {\r\n      //   headerName: \"Action\",\r\n      //   cellRenderer: (params) => (\r\n      //     <div style={styles.btnSpacing}>\r\n      //       <button\r\n      //         onClick={() => navigateToEdit(params.data)}\r\n      //         className=\"\"\r\n      //         style={styles.btnStyle}\r\n      //       >\r\n      //         <MdModeEdit size={20} />\r\n      //       </button>\r\n      //       <button\r\n      //         style={{ ...styles.btnStyle, marginLeft: \"8px\" }}\r\n      //         onClick={() => deleteLeave(item.id)}\r\n      //       >\r\n      //         <MdDelete size={25} />\r\n      //       </button>\r\n      //     </div>\r\n      //   ),\r\n      // },\r\n    ],\r\n    []\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer\r\n      // toastStyle={{ backgroundColor: \"#10a945\", color: \"white\" }}\r\n      />\r\n      <div className=\"table-responsive\">\r\n        <div\r\n          className=\"ag-theme-quartz\"\r\n          style={{\r\n            height: \"500px\",\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"space-evenly\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          <AgGridReact\r\n            columnDefs={columnDefs}\r\n            rowData={attendance}\r\n            pagination={true}\r\n            paginationPageSize={10}\r\n            paginationAutoPageSize={true}\r\n            suppressPaginationPanel={true}\r\n            animateRows={true}\r\n            defaultColDef={{\r\n              sortable: true,\r\n              resizable: true,\r\n              filter: true,\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <CustomAlert\r\n        isOpen={isOpenAlert}\r\n        message={alertMessage}\r\n        severity={alertSeverity}\r\n        handleCloseAlert={() => handleCloseAlert()}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ViewAllEmployeesData;\r\n"],"sourceRoot":""}
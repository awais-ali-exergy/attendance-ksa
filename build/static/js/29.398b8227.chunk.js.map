{"version":3,"sources":["views/pages/Employee/ViewAllEmployees/ViewAllEmployeesData.js"],"names":["ViewAllEmployeesData","employees","setEmployees","useState","useEffect","async","response","fetch","concat","process","method","headers","Authorization","window","localStorage","getItem","redirect","status","result","json","SUCCESS","DATA","console","log","error","getAllEmp","columns","useMemo","headerName","field","sortable","filter","floatingFilter","valueGetter","params","data","firstName","lastName","valueFormatter","value","_jsx","className","style","height","width","children","AgGridReact","columnDefs","rowData","pagination","paginationPageSize"],"mappings":"iGAAA,kDAuIeA,UA3HcA,KAC3B,MAAOC,EAAWC,GAAgBC,mBAAS,IA+B3CC,qBAAU,KA7BQC,WAChB,IACE,MAAMC,QAAiBC,MAAM,GAADC,OACvBC,2BAAgCD,OAAGC,OAAkC,2CACxE,CACEC,OAAQ,OACRC,QAAS,CACPC,cACE,UAAYC,OAAOC,aAAaC,QAAQ,mBAE5CC,SAAU,WAGVV,EAASW,OAGb,MAAMC,QAAeZ,EAASa,OACP,IAAnBD,EAAOE,UACTlB,EAAagB,EAAOG,MACpBC,QAAQC,IAAIL,EAAOG,MAIvB,CAAE,MAAOG,GACPF,QAAQE,MAAM,mBAAoBA,EAEpC,GAIAC,EAAW,GACV,IAEH,MAAMC,EAAUC,mBACd,IAAM,CACJ,CACEC,WAAY,gBACZC,MAAO,WACPC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,EAChBC,YAAcC,GAAM,GAAA1B,OACf0B,EAAOC,KAAKC,UAAS,KAAA5B,OAAI0B,EAAOC,KAAKE,WAE5C,CACET,WAAY,cACZC,MAAO,SACPC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,GAElB,CACEJ,WAAY,QACZC,MAAO,QACPC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,GAElB,CACEJ,WAAY,SACZC,MAAO,cACPC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,GAElB,CACEJ,WAAY,aACZC,MAAO,mBACPC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,GAElB,CACEJ,WAAY,cACZC,MAAO,oBACPC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,GAElB,CACEJ,WAAY,cACZC,MAAO,YACPC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,GAElB,CACEJ,WAAY,YACZC,MAAO,qBACPC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,EAChBM,eAAiBJ,GACE,MAAjBA,EAAOK,MAAgB,SAAW,WAEtC,CACEX,WAAY,cACZC,MAAO,YACPC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,EAChBM,eAAiBJ,GACE,MAAjBA,EAAOK,MAAgB,WAAa,kBAG1C,IAGF,OACEC,cAAA,OAAKC,UAAU,kBAAkBC,MAAO,CAAEC,OAAQ,QAASC,MAAO,QAASC,SACzEL,cAACM,cAAW,CACVC,WAAYrB,EACZsB,QAAS/C,EACTgD,YAAY,EACZC,mBAAoB,MAElB,C","file":"static/js/29.398b8227.chunk.js","sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\r\nconst styles = {\r\n  bgHeading: {\r\n    background: \"#10a945\",\r\n    color: \"white\",\r\n    padding: \"30px\",\r\n  },\r\n};\r\n\r\nconst ViewAllEmployeesData = () => {\r\n  const [employees, setEmployees] = useState([]);\r\n\r\n  const getAllEmp = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_API_DOMAIN}${process.env.REACT_APP_SUB_API_NAME}/Users/GetAllWithCustomFieldsByUserFirm`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization:\r\n              \"Bearer \" + window.localStorage.getItem(\"AtouBeatXToken\"),\r\n          },\r\n          redirect: \"follow\",\r\n        }\r\n      );\r\n      if (response.status === 401) {\r\n        // Handle unauthorized access\r\n      }\r\n      const result = await response.json();\r\n      if (result.SUCCESS === 1) {\r\n        setEmployees(result.DATA);\r\n        console.log(result.DATA);\r\n      } else {\r\n        // Handle error\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch:\", error);\r\n      // Handle error\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllEmp();\r\n  }, []);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        headerName: \"Employee Name\",\r\n        field: \"fullName\",\r\n        sortable: true,\r\n        filter: true,\r\n        floatingFilter: true,\r\n        valueGetter: (params) =>\r\n          `${params.data.firstName} ${params.data.lastName}`,\r\n      },\r\n      {\r\n        headerName: \"National ID\",\r\n        field: \"cnicNo\",\r\n        sortable: true,\r\n        filter: true,\r\n        floatingFilter: true,\r\n      },\r\n      {\r\n        headerName: \"Email\",\r\n        field: \"email\",\r\n        sortable: true,\r\n        filter: true,\r\n        floatingFilter: true,\r\n      },\r\n      {\r\n        headerName: \"Branch\",\r\n        field: \"branchLabel\",\r\n        sortable: true,\r\n        filter: true,\r\n        floatingFilter: true,\r\n      },\r\n      {\r\n        headerName: \"Department\",\r\n        field: \"department.label\",\r\n        sortable: true,\r\n        filter: true,\r\n        floatingFilter: true,\r\n      },\r\n      {\r\n        headerName: \"Designation\",\r\n        field: \"designation.label\",\r\n        sortable: true,\r\n        filter: true,\r\n        floatingFilter: true,\r\n      },\r\n      {\r\n        headerName: \"Contact No.\",\r\n        field: \"contactNo\",\r\n        sortable: true,\r\n        filter: true,\r\n        floatingFilter: true,\r\n      },\r\n      {\r\n        headerName: \"Is Active\",\r\n        field: \"isAccountNonLocked\",\r\n        sortable: true,\r\n        filter: true,\r\n        floatingFilter: true,\r\n        valueFormatter: (params) =>\r\n          params.value === \"1\" ? \"Active\" : \"Blocked\",\r\n      },\r\n      {\r\n        headerName: \"Is Verified\",\r\n        field: \"isEnabled\",\r\n        sortable: true,\r\n        filter: true,\r\n        floatingFilter: true,\r\n        valueFormatter: (params) =>\r\n          params.value === \"1\" ? \"Verified\" : \"Non-Verified\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  return (\r\n    <div className=\"ag-theme-quartz\" style={{ height: \"600px\", width: \"100%\" }}>\r\n      <AgGridReact\r\n        columnDefs={columns}\r\n        rowData={employees}\r\n        pagination={true}\r\n        paginationPageSize={10}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewAllEmployeesData;\r\n"],"sourceRoot":""}